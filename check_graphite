#! /usr/bin/env ruby
#
#   <script name>
#
# DESCRIPTION:
#   Get time series values from Graphite and create events based on values
#
# OUTPUT:
#   plain text
#
# PLATFORMS:
#   Linux
#
# USAGE:
#   #YELLOW
#
# NOTES:
#
# LICENSE:
#   Copyright 2012 Ulf Mansson @ Recorded Future
#   Modifications by Chris Jansen to support wildcard targets
#   Ported by William Leese to work with nagios and pull in a small
#   dependency (array_stats).
#   Released under the same terms as Sensu (the MIT license); see LICENSE
#   for details.
#

require 'rubygems'
require 'json'
require 'net/http'
require 'socket'
require 'optparse'


class Float
  # Returns true if a float has a fractional part; i.e. <tt>f == f.to_i</tt>
  def fractional_part?
    fractional_part != 0.0
  end
  
  # Returns the fractional part of a float. For example, <tt>(6.67).fractional_part == 0.67</tt>
  def fractional_part
    (self - self.truncate).abs
  end
end

module ArrayStats
  # Returns the sum of all elements in the array; 0 if array is empty
  def total_sum
    self.inject(0) {|sum, sample| sum += sample}
  end
  
  # Returns the mean of all elements in array; nil if array is empty
  def mean
    if self.length == 0
      nil
    else
      self.total_sum / self.length
    end
  end

  # Returns the median for the array; nil if array is empty
  def median
    percentile(50)
  end
  
  # Returns the percentile value for percentile _p_; nil if array is empty.
  #
  # _p_ should be expressed as an integer; <tt>percentile(90)</tt> returns the 90th percentile of the array.
  #
  # Algorithm from NIST[http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm]
  def percentile p
    sorted_array = self.sort
    rank = (p.to_f / 100) * (self.length + 1)
    
    if self.length == 0
      return nil
    elsif rank.fractional_part?
      sample_0 = sorted_array[rank.truncate - 1]
      sample_1 = sorted_array[rank.truncate]

      return (rank.fractional_part * (sample_1 - sample_0)) + sample_0
    else
      return sorted_array[rank - 1]
    end    
  end
end

class Array
  include ArrayStats
end

class Graphite

  def initialize
    option = {}

    optparse = OptionParser.new do|opts|
      option[:host] = ""
      opts.on('-H', '--host HOST', 'Graphite host to connect to, include port') do |f|
        option[:host] = f
      end

      option[:target] = nil
      opts.on('-t', '--target TARGET', 'The graphite metric name. Could be a comma separated list of metric names.') do |f|
        option[:target] = f
      end

      option[:complex_target] = false
      opts.on('-x', '--complex_target TARGET', 'Allows complex targets which contain functions. Disables splitting on comma.') do |f|
        option[:complex_target] = f
      end

      option[:period] = '2hours'
      opts.on('-p', '--period PERIOD', 'The period back in time to extract from Graphite and compare with. Use 24hours,2days etc, same format as in Graphite') do |f|
        option[:period] = f
      end

      option[:updated_since] = 600
      opts.on('-u', '--updated_since UPDATED_SINCE', 'The graphite value should have been updated within UPDATED_SINCE seconds, default to 600 seconds') do |f|
        option[:updated_since] = f
      end

      option[:acceptable_diff_percentage] = 0
      opts.on('-d', '--acceptable_diff_percentage ACCEPTABLE_DIFF_PERCENTAGE', 'The acceptable diff from max values in percentage, used in check_function_increasing') do |f|
        option[:acceptable_diff_percentage] = f
      end

      option[:check_function_increasing] = false
      opts.on('-i', '--check_function_increasing', 'Check that value is increasing or equal over time (use acceptable_diff_percentage if it should allow to be lower)') do |f|
        option[:check_function_increasing] = f
      end

      option[:greater_than] = false
      opts.on('-g', '--greater_than', 'Change whether value is greater than or less than check') do |f|
        option[:greater_than] = f
      end

      option[:check_last] = false
      opts.on('-l', '--last VALUE', 'Check that the last value in GRAPHITE is greater/less than VALUE') do |f|
        option[:check_last] = f
      end

      option[:ignore_nulls] = false
      opts.on('-n', '--ignore_nulls', 'Do not error on null values, used in check_function_increasing') do |f|
        option[:ignore_nulls] = f
      end

      option[:concat_output] = false
      opts.on('-c', '--concat_output', 'Include warning messages in output even if overall status is critical') do |f|
        option[:concat_output] = f
      end

      option[:short_output] = false
      opts.on('-s', '--short_output', 'Report only the highest status per series in output') do |f|
        option[:short_output] = f
      end

      option[:check_average] = false
      opts.on('-a', '--average_value MAX_VALUE', 'MAX_VALUE should be greater than the average of Graphite values from PERIOD') do |f|
        option[:check_average] = f
      end

      option[:data_points] = 1
      opts.on('-d', '--data_points VALUE', 'Number of data points to include in average check (smooths out spikes)') do |f|
        option[:data_points] = f
      end

      option[:debug] = false
      opts.on('-D', '--debug', 'Debug output') do |f|
        option[:debug] = f
      end

      option[:check_average_percent] = false
      opts.on('-b', '--average_percent_value MAX_VALUE', 'MAX_VALUE% should be greater than the average of Graphite values from PERIOD') do |f|
        option[:check_average_percent] = f
      end

      option[:percentile] = 90
      opts.on('-y', '--percentile PERCENTILE', 'Percentile value, should be used in conjunction with percentile_value, defaults to 90') do |f|
        option[:percentile] = f
      end

      option[:check_percentile] = false
      opts.on('-z', '--percentile_value VALUE', 'Values should not be greater than the VALUE of Graphite values from PERIOD') do |f|
        option[:check_percentile] = f
      end

      option[:http_user] = nil
      opts.on('-U', 'Basic HTTP authentication user', '--http-user USER') do |f|
        option[:http_user] = f
      end

      option[:http_password] = nil
      opts.on('-P', 'Basic HTTP authentication password', '--http-password USER') do |f|
        option[:http_password] = f
      end

      opts.on('-h', '--help', 'Display this screen') do
        puts opts
        exit
      end
    end

    optparse.parse!

    if option[:host] == "" and (option[:target] == "" and option[:complex_target] == "")
      puts "Always provide a graphite host and target"
      puts "For help, run with -h"
      exit
    end

    @graphite_cache = {}
    @config = option
    debuglog "options provided: #{option.to_json}"
  end

  def graphite_cache(target = nil)
    # #YELLOW
    if @graphite_cache.key?(target)
      graphite_value = @graphite_cache[target].select { |value| value[:period] == @period }
      graphite_value if graphite_value.size > 0
    end
  end

# Create a graphite url from params
#
#
  def graphite_url(target = nil)
    url = "#{@config[:host]}/render/"
    url = 'http://' + url unless url[0..3] == 'http'
    # #YELLOW
    url = url + "?target=#{target}" if target # rubocop:disable Style/SelfAssignment
    URI.parse(url)
  end

  def get_levels(config_param)
    values = config_param.split(',')
    i = 0
    levels = {}
    %w(warning error fatal).each do |type|
      levels[type] = values[i] if values[i]
      i += 1
    end
    levels
  end

  def get_graphite_values(target)
    cache_value = graphite_cache target
    return cache_value if cache_value
    params = {
      :target => target,
      :from => "-#{@period}",
      :format => 'json'
    }

    debuglog "Parameters for graphite call: #{params.to_json}"
    req = Net::HTTP::Post.new(graphite_url.path, initheader = {'User-Agent' => 'nagios-check'})

    # If the basic http authentication credentials have been provided, then use them
    if !@config[:http_user].nil? && !@config[:http_password].nil?
      req.basic_auth(@config[:http_user], @config[:http_password])
    end

    req.set_form_data(params)
    begin
      resp = Net::HTTP.new(graphite_url.host, graphite_url.port)
      resp.open_timeout = 20

      resp = resp.start { |http| http.request(req) }
    rescue Timeout::Error, Errno::EINVAL, Errno::ECONNRESET, EOFError, Errno::ETIMEDOUT,
       Net::HTTPBadResponse, Net::HTTPHeaderSyntaxError, Net::ProtocolError => e
      puts "Failed connecting to graphite:"
      puts "#{e}"
      exit 3
    end
    debuglog "Response: #{resp.body}"

    data = JSON.parse(resp.body)
    @graphite_cache[target] = []
    if data.size > 0
      data.each { |d| @graphite_cache[target] << { :target => d['target'], :period => @period, :datapoints => d['datapoints'] } }
      graphite_cache target
    end
  end

# Will give max values for [0..-2]
  def max_graphite_value(target)
    max_values = {}
    values = get_graphite_values target
    if values
      values.each do |val|
        max = get_max_value(val[:datapoints])
        max_values[val[:target]] = max
      end
    end
    max_values
  end

  def get_max_value(values)
    if values
      values.map { |i| i[0] ? i[0] : 0 }[0..-2].max
    end
  end

  def last_graphite_metric(target, count = 1)
    last_values = {}
    values = get_graphite_values target
    if values
      values.each do |val|
        last = get_last_metric(val[:datapoints], count)
        last_values[val[:target]] = last
      end
    end
    last_values
  end

  def get_last_metric(values, count = 1)
    if values
      ret = []
      values_size = values.size
      count = values_size if count > values_size
      while count > 0
        values_size -= 1
        break if values[values_size].nil?
        count -= 1 if values[values_size][0]
        ret.push(values[values_size]) if values[values_size][0]
      end
      ret
    end
  end

  def last_graphite_value(target, count = 1)
    last_metrics = last_graphite_metric(target, count)
    last_values = {}
    if last_metrics
      last_metrics.each do |target_name, metrics|
        last_values[target_name] = metrics.map { |metric|  metric[0] }.mean
      end
    end
    last_values
  end

  def been_updated_since(target, time, updated_since)
    last_time_stamp = last_graphite_metric target
    warnings = []
    if last_time_stamp
      last_time_stamp.each do |target_name, value|
        last_time_stamp_bool = value[0][1] > time.to_i ? true : false
        warnings << "#{target_name} has not been updated in #{updated_since} seconds" unless last_time_stamp_bool
      end
    end
    warnings
  end

  def greater_less
    return 'greater' if @config[:greater_than]
    return 'less' unless @config[:greater_than]
  end

  def inverted_greater_less
    return 'less' if @config[:greater_than]
    return 'greater' unless @config[:greater_than]
  end

  def check_increasing(target)
    updated_since = @config[:updated_since].to_i
    time_to_be_updated_since = Time.now - updated_since
    critical_errors = []
    warnings = []
    oks = []
    max_gv = max_graphite_value target
    last_gv = last_graphite_value target
    if last_gv.is_a?(Hash) && max_gv.is_a?(Hash)
      # #YELLOW
      last_gv.each do |target_name, value|
        if value && max_gv[target_name]
          last = value
          max = max_gv[target_name]
          if max > last * (1 + @config[:acceptable_diff_percentage].to_f / 100)
            msg = "last value #{last} is less than max value #{max} during #{@config[:period]} period"
            critical_errors << msg
          else
            msg = "last value #{last} is > #{max} during #{@config[:period]} period"
            oks << msg
          end
        end
      end
    else
      warnings << "Could not find any value in Graphite for metric #{target}, see #{graphite_url(target)}"
    end
    unless @config[:ignore_nulls]
      warnings.concat(been_updated_since(target, time_to_be_updated_since, updated_since))
    end
    [warnings, critical_errors, [], oks]
  end

  def check_average_percent(target, max_values, data_points = 1)
    values = get_graphite_values target
    last_values = last_graphite_value(target, data_points)
    unless last_values
      puts "UNKNOWN - no values from metric #{target}"
      exit 3
    end
    warnings = []
    criticals = []
    fatal = []
    oks = []
    values.each do |data|
      target = data[:target]
      values_pair = data[:datapoints]
      values_array = values_pair.select(&:first).map { |v| v.first unless v.first.nil? }
      # #YELLOW
      avg_value = values_array.reduce { |sum, el| sum + el if el }.to_f / values_array.size # rubocop:disable SingleLineBlockParams
      last_value = last_values[target]
      percent = last_value / avg_value unless last_value.nil? || avg_value.nil?
      oks << "#{target} is #{percent}% #{inverted_greater_less} than #{max_values["warning"]}% of avg #{avg_value}"
      # #YELLOW
      %w(fatal error warning).each do |type|
        next unless max_values.key?(type)
        max_value = max_values[type]
        var1 = @config[:greater_than] ? percent : max_value.to_f
        var2 = @config[:greater_than] ? max_value.to_f : percent
        if !percent.nil? && var1 > var2 && (values_array.size > 0 || !@config[:ignore_nulls])
          text = "metric value is #{percent}% #{greater_less} than #{max_value}% of the avg #{avg_value}"
          case type
          when 'warning'
            warnings << text
          when 'error'
            criticals << text
          when 'fatal'
            fatal << text
          else
            fail "Unknown type #{type}"
          end
          break if @config[:short_output]
        end
      end
    end
    [warnings, criticals, fatal, oks]
  end

  def check_average(target, max_values)
    values = get_graphite_values target
    unless values
      puts "UNKNOWN - no values from metric #{target}"
      exit 3
    end
    warnings = []
    criticals = []
    fatal = []
    oks = []
    values.each do |data|
      target = data[:target]
      values_pair = data[:datapoints]
      values_array = values_pair.select(&:first).map { |v| v.first unless v.first.nil? }
      # #YELLOW
      avg_value = values_array.reduce { |sum, el| sum + el if el }.to_f / values_array.size # rubocop:disable SingleLineBlockParams
      debuglog "Average is: #{avg_value}"
      oks << "average #{avg_value} is #{inverted_greater_less} than #{max_values["warning"]}"
      # YELLOW
      %w(fatal error warning).each do |type|
        next unless max_values.key?(type)
        max_value = max_values[type]
        var1 = @config[:greater_than] ? avg_value : max_value.to_f
        var2 = @config[:greater_than] ? max_value.to_f : avg_value
        if var1 > var2 && (values_array.size > 0 || !@config[:ignore_nulls])
          text = "avg of metric is #{avg_value} that is #{greater_less} than #{max_value}"
          case type
          when 'warning'
            warnings << text
          when 'error'
            criticals << text
          when 'fatal'
            fatal << text
          else
            fail "Unknown type #{type}"
          end
          break if @config[:short_output]
        end
      end
    end
    [warnings, criticals, fatal, oks]
  end

  def check_percentile(target, max_values, percentile, data_points = 1)
    values = get_graphite_values target
    last_values = last_graphite_value(target, data_points)
    unless last_values
      puts "UNKNOWN - no values from metric #{target}"
      exit 3
    end
    warnings = []
    criticals = []
    fatal = []
    oks = []
    values.each do |data|
      target = data[:target]
      values_pair = data[:datapoints]
      values_array = values_pair.select(&:first).map { |v| v.first unless v.first.nil? }
      percentile_value = values_array.percentile(percentile)
      last_value = last_values[target]
      percent = last_value / percentile_value unless last_value.nil? || percentile_value.nil?
      oks << "#{last_value} is #{inverted_greater_less} than #{percentile}th percentile (#{percentile_value}) by more than #{max_values["warning"]}%"
      # #YELLOW
      %w(fatal error warning).each do |type|
        next unless max_values.key?(type)
        max_value = max_values[type]
        var1 = @config[:greater_than] ? percent : max_value.to_f
        var2 = @config[:greater_than] ? max_value.to_f : percent
        if !percentile_value.nil? && var1 > var2
          text = "percentile of metric (#{last_value}) is #{greater_less} than #{percentile}th percentile (#{percentile_value}) by more than #{max_value}%"
          case type
          when 'warning'
            warnings << text
          when 'error'
            criticals << text
          when 'fatal'
            fatal << text
          else
            fail "Unknown type #{type}"
          end
          break if @config[:short_output]
        end
      end
    end
    [warnings, criticals, fatal, oks]
  end

  def check_last(target, max_values)
    last_targets = last_graphite_value target
    unless last_targets
      puts "UNKNOWN - no values from metric #{target}"
      exit 3
    end
    warnings = []
    criticals = []
    fatal = []
    oks = []
    # #YELLOW
    last_targets.each do |target_name, last_value|
      unless last_value.nil?
        oks << "#{last_value} is #{inverted_greater_less} than #{max_values["warning"]}"
        # #YELLOW
        %w(fatal error warning).each do |type|
          next unless max_values.key?(type)
          max_value = max_values[type]
          var1 = @config[:greater_than] ? last_value : max_value.to_f
          var2 = @config[:greater_than] ? max_value.to_f : last_value
          if var1 > var2
            text = "metric value #{last_value} is #{greater_less} than #{max_value}"
            case type
            when 'warning'
              warnings << text
            when 'error'
              criticals << text
            when 'fatal'
              fatal << text
            else
              fail "Unknown type #{type}"
            end
            break if @config[:short_output]
          end
        end
      end
    end
    [warnings, criticals, fatal, oks]
  end

  def run # rubocop:disable AbcSize
    targets = @config[:complex_target] ? [@config[:complex_target]] : @config[:target].split(',')
    @period = @config[:period]
    critical_errors = []
    warnings = []
    fatals = []
    oks = []
    # #YELLOW
    targets.each do |target|
      debuglog "Checking target: #{target}"
      if @config[:check_function_increasing]
        inc_warnings, inc_critical, inc_fatal, inc_ok = check_increasing target
        warnings += inc_warnings
        critical_errors += inc_critical
        fatals += inc_fatal
        oks += inc_ok
      end
      if @config[:check_last]
        max_values = get_levels @config[:check_last]
        lt_warnings, lt_critical, lt_fatal, lt_ok = check_last(target, max_values)
        warnings += lt_warnings
        critical_errors += lt_critical
        fatals += lt_fatal
        oks += lt_ok
      end
      if @config[:check_average]
        max_values = get_levels @config[:check_average]
        avg_warnings, avg_critical, avg_fatal, avg_ok = check_average(target, max_values)
        warnings += avg_warnings
        critical_errors += avg_critical
        fatals += avg_fatal
        oks += avg_ok
      end
      if @config[:check_average_percent]
        max_values = get_levels @config[:check_average_percent]
        avg_warnings, avg_critical, avg_fatal, avg_ok = check_average_percent(target, max_values, @config[:data_points].to_i)
        warnings += avg_warnings
        critical_errors += avg_critical
        fatals += avg_fatal
        oks += avg_ok
      end
      if @config[:check_percentile]
        max_values = get_levels @config[:check_percentile]
        pct_warnings, pct_critical, pct_fatal, pct_ok = check_percentile(target, max_values, @config[:percentile].to_i, @config[:data_points].to_i)
        warnings += pct_warnings
        critical_errors += pct_critical
        fatals += pct_fatal
        oks += pct_ok
      end
    end
    fatals_string = fatals.size > 0 ? fatals.join("\n") : ''
    criticals_string = critical_errors.size > 0 ? critical_errors.join("\n") : ''
    warnings_string = warnings.size > 0 ? warnings.join("\n") : ''
    oks_string = oks.size > 0 ? oks.join("\n") : ''

    if @config[:concat_output]
      fatals_string = fatals_string + "\n" + criticals_string if critical_errors.size > 0
      fatals_string = fatals_string + "\nGraphite WARNING: " + warnings_string if warnings.size > 0
      criticals_string = criticals_string + "\nGraphite WARNING: " + warnings_string if warnings.size > 0
      critical fatals_string if fatals.size > 0
      critical criticals_string if critical_errors.size > 0
      warning warnings_string if warnings.size > 0
    else
      critical fatals_string if fatals.size > 0
      critical criticals_string if critical_errors.size > 0
      warning warnings_string if warnings.size > 0
    end
    ok oks_string
  end

  def ok(output)
    puts "OK - #{output}"
    exit 0
  end
  def warning(output)
    puts "WARNING - #{output}"
    exit 1
  end
  def critical(output)
    puts "CRITICAL - #{output}"
    exit 2
  end
  def unknown(output)
    puts "UNKNOWN - #{output}"
    exit 3
  end
  
  def debuglog(output)
    if @config[:debug]
      puts "DEBUG: #{output}"
    end
  end
end

instance = Graphite.new
instance.run
